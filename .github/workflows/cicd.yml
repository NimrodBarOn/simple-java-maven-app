name: Java CI with Maven and Snyk

on:
  push:
    branches: [ "master", "development" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Install Maven
      run: |
        MAVEN_VERSION=3.9.2
        wget https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz
        tar xzvf apache-maven-$MAVEN_VERSION-bin.tar.gz
        sudo mv apache-maven-$MAVEN_VERSION /opt/maven
        sudo ln -sf /opt/maven/bin/mvn /usr/bin/mvn
      env:
        JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Test with Maven
      if: github.ref == 'refs/heads/development'
      run: mvn test

    - name: Snyk Maven Dependency Scan
      uses: snyk/actions/maven@v2
      with:
        args: --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Build and Push Docker Image
      if: github.ref == 'refs/heads/master'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/simple-java-maven-app:${{ env.new_version }}

    - name: Snyk Docker Image Scan
      uses: snyk/actions/docker@v1
      with:
        args: ${{ secrets.DOCKER_USERNAME }}/simple-java-maven-app:${{ env.new_version }}
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Deploy Docker Image
      if: github.ref == 'refs/heads/master'
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh -o StrictHostKeyChecking=no -i "~/.ssh/id_rsa" ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker pull ${{ secrets.DOCKER_USERNAME }}/simple-java-maven-app:${{ env.new_version }}
          docker run -d --name my-app -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/simple-java-maven-app:${{ env.new_version }}
        EOF
      env:
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        NEW_VERSION: ${{ env.new_version }}

