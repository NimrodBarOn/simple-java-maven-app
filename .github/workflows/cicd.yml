name: Java CI with Maven

on:
  push:
    branches: [ "master", "development" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Install Maven 3.9.2
      run: |
        MAVEN_VERSION=3.9.2
        wget https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz
        tar xzvf apache-maven-$MAVEN_VERSION-bin.tar.gz
        sudo mv apache-maven-$MAVEN_VERSION /opt/maven
        sudo ln -sf /opt/maven/bin/mvn /usr/bin/mvn
      env:
        JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Test with Maven
      if: github.ref == 'refs/heads/development'
      run: mvn test

    - name: Secret Scanning with TruffleHog
      uses: trufflesecurity/trufflehog-action@v3.0.7
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Dependency Scanning with Snyk
      uses: snyk/actions/cli@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: snyk test --severity-threshold=critical

    - name: Dockerfile Scanning with Docker Linter
      run: |
        docker run --rm -i hadolint/hadolint < Dockerfile

    - name: Static Code Analysis with CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: java
    - run: |
        codeql database create db
        codeql database analyze db --format=sarif -o codeql-report.sarif
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: github/codeql-action/analyze@v2

    - name: Sign Docker Image with Notary
      if: github.ref == 'refs/heads/master'
      run: |
        docker trust sign ${{ secrets.DOCKER_USERNAME }}/simple-java-maven-app:${{ env.new_version }}

    - name: Verify Docker Image with Notary
      if: github.ref == 'refs/heads/master'
      run: |
        docker trust inspect --pretty ${{ secrets.DOCKER_USERNAME }}/simple-java-maven-app:${{ env.new_version }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-app-${{ env.new_version }}
        path: target/*.jar

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image
      if: github.ref == 'refs/heads/master'
      id: docker_build
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/simple-java-maven-app:${{ env.new_version }}

    - name: Commit and push new version
      if: success()
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add pom.xml
        git commit -m "Update version to ${{ env.new_version }}"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Deploy Docker Image
      if: github.ref == 'refs/heads/master'
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh -o StrictHostKeyChecking=no -i "~/.ssh/id_rsa" ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker pull ${{ secrets.DOCKER_USERNAME }}/simple-java-maven-app:${{ env.new_version }}
    
          # Clean up unused containers and images
          docker container prune -f
          docker image prune -f
    
          # Check if the container is running and stop/remove if necessary
          if [ $(docker ps -aq -f name=my-app) ]; then
            echo "Stopping and removing existing container"
            docker stop my-app || true
            docker rm my-app || true
          else
            echo "No existing container to stop and remove"
          fi
          
          # Run the new container
          docker run -d --name my-app -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/simple-java-maven-app:${{ env.new_version }}
        EOF
      env:
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        NEW_VERSION: ${{ env.new_version }}

