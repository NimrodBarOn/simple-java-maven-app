name: Java CI with Maven

on:
  push:
    branches: [ "master", "development" ]

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      id: setup-java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Install Maven
      run: |
        MAVEN_VERSION=3.9.2
        wget https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz
        tar xzvf apache-maven-$MAVEN_VERSION-bin.tar.gz
        sudo mv apache-maven-$MAVEN_VERSION /opt/maven
        sudo ln -sf /opt/maven/bin/mvn /usr/bin/mvn
      env:
        JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}

  build:
    runs-on: ubuntu-latest
    needs: setup

    steps:
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-app-${{ env.new_version }}
        path: target/*.jar

  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/development'

    steps:
    - name: Test with Maven
      run: mvn test

  scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Run Snyk Maven Dependency Scan
      uses: snyk/actions/maven-3-jdk-17@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}
      with:
        args: --severity-threshold=high --fail-on=all

  docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image
      id: docker_build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/simple-java-maven-app:${{ env.new_version }}

    - name: Get Image Digest
      id: get_digest
      run: |
        DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.DOCKER_USERNAME }}/simple-java-maven-app:${{ env.new_version }} | sed 's/^[^@]*@//')
        echo "digest=$DIGEST" >> $GITHUB_ENV

  sign:
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.6.0

    - name: Sign images with Cosign
      run: |
        IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/simple-java-maven-app:${{ env.new_version }}"
        DIGEST="${{ env.digest }}"
        cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${IMAGE_TAG}@${DIGEST}
      env:
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        DIGEST: ${{ env.digest }}

  verify:
    runs-on: ubuntu-latest
    needs: sign
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.6.0

    - name: Verify image signature
      run: |
        IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/simple-java-maven-app:${{ env.new_version }}"
        DIGEST="${{ env.digest }}"
        cosign verify --key ${COSIGN_PUBLIC_KEY} ${IMAGE_TAG}@${DIGEST}
      env:
        COSIGN_PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
        DIGEST: ${{ env.digest }}

  deploy:
    runs-on: ubuntu-latest
    needs: verify
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Deploy Docker Image
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh -o StrictHostKeyChecking=no -i "~/.ssh/id_rsa" ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker pull ${{ secrets.DOCKER_USERNAME }}/simple-java-maven-app:${{ env.new_version }}
    
          # Clean up unused containers and images
          docker container prune -f
          docker image prune -f
    
          # Check if the container is running and stop/remove if necessary
          if [ $(docker ps -aq -f name=my-app) ]; then
            echo "Stopping and removing existing container"
            docker stop my-app || true
            docker rm my-app || true
          else
            echo "No existing container to stop and remove"
          fi
          
          # Run the new container
          docker run -d --name my-app -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/simple-java-maven-app:${{ env.new_version }}
        EOF
      env:
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        NEW_VERSION: ${{ env.new_version }}

